@model Ontrack.ViewModels.StudentDetailsViewModel

@{
    ViewData["Title"] = "Student Details";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
        }

        .container {
            max-width: 800px;
            margin-top: 30px;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
        }

        .section-header {
            font-weight: bold;
            background-color: #007bff;
            color: white;
            padding: 10px;
            border-radius: 5px 5px 0 0;
        }

        .section-content {
            border: 1px solid #007bff;
            border-radius: 0 0 5px 5px;
            padding: 10px;
            margin-bottom: 20px;
            background-color: white;
        }

        table {
            width: 100%;
        }

        th, td {
            text-align: left;
            padding: 8px;
        }

        th {
            background-color: #007bff;
            color: black;
        }

        .tuition-status {
            font-weight: bold;
            color: #007bff;
        }
    </style>
</head>
<body>

    <div class="container">
        <!-- Student Selection Dropdown -->
        <div class="mb-4">
            <label for="studentSelect" class="form-label">Select Student:</label>
            <select id="studentSelect" class="form-select" onchange="onStudentChange(this.value)">
                @foreach (var student in Model.Students)
                {
                    <option value="@student.StudentID">@student.FullName</option>
                }
            </select>
        </div>




<!-- Debugging Output -->
>



<!-- Filters Form -->
        <form method="get" asp-action="StudentDetails" class="row mb-4">
            <div class="col-md-6">
                <label for="monthSelect" class="form-label">Select Month:</label>
                <select id="monthSelect" name="selectedMonth" class="form-select" onchange="this.form.submit()">
                    <!-- Options will be populated by JavaScript -->
                </select>
            </div>
            <div class="col-md-6">
                <label for="weekSelect" class="form-label">Select Week:</label>
                <select id="weekSelect" name="selectedWeek" class="form-select" onchange="this.form.submit()">
                    <!-- Options will be populated by JavaScript -->
                </select>
            </div>
        </form>





        <!-- Student Details Header -->
        <div class="header">
            <h2>Student Details</h2>
            <p id="studentName">@Model.Students.FirstOrDefault()?.FullName</p>
        </div>

        <!-- Attendance Section -->
        <div class="section">
            <div class="section-header">Attendance</div>
            <div class="section-content">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Absent</th>
                        </tr>
                    </thead>
                    <tbody id="attendanceData">
                        @foreach (var attendance in Model.Students.FirstOrDefault()?.AttendanceRecords ?? new List<Attendance>())
                        {
                            <tr>
                                <td>@attendance.Date.ToString("yyyy-MM-dd")</td>
                                <td>@attendance.IsPresent</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div>
            @* Log the JSON serialized options *@
            <script>
                console.log("Month Options: ", @Html.Raw(Json.Serialize(Model.MonthOptions)));
            </script>
        </div>

        <!-- Grades Section -->
        <div class="section">
            <div class="section-header">Grades</div>
            <div class="section-content">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Subject</th>
                            <th>Grade</th>
                        </tr>
                    </thead>
                    <tbody id="gradesData">
                        @foreach (var examResult in Model.Students.FirstOrDefault()?.ExamResults ?? new List<StudentExamsResult>())
                        {
                            <tr>
                            
                            
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Tuition Section -->
        <div class="section">
            <div class="section-header">Tuition Payment Status</div>
            <div class="section-content">
                @if (Model.Students.FirstOrDefault()?.Payments != null && Model.Students.FirstOrDefault().Payments.Any())
                {
                    var paymentStatus = Model.Students.FirstOrDefault().Payments.All(p => p.IsPaid) ? "Yes" : "No";
                    <p class="tuition-status">Paid: @paymentStatus</p>
                }
                else
                {
                    <p class="tuition-status">Paid: No records found</p>
                }
            </div>
        </div>
    </div>

    <script>
        function onStudentChange(studentId) {
            const studentName = document.querySelector(`#studentSelect option[value="${studentId}"]`).textContent;
            document.getElementById('studentName').textContent = studentName;
            updateFilteredData();
        }

        function onFilterChange() {
            updateFilteredData();
        }

        function updateFilteredData() {
            // Your logic for updating the attendance and grades can go here
        }
    </script>
    <script>
        const monthOptions = @Html.Raw(Json.Serialize(Model.MonthOptions));
        const selectedMonth = "@Model.SelectedMonth";
        const weekOptions = ["week1", "week2", "week3", "week4"];
        const selectedWeek = "@Model.SelectedWeek";

        function populateSelect(selectElement, options, selectedValue) {
            options.forEach(option => {
                const opt = document.createElement("option");
                opt.value = option.value; // Use lowercase `value`
                opt.text = option.text; // Use lowercase `text`
                if (opt.value === selectedValue) opt.selected = true; // Set selected option
                selectElement.appendChild(opt);
            });
        }
                    }

        document.addEventListener("DOMContentLoaded", function () {
            // Check if elements exist before populating
            const monthSelect = document.getElementById("monthSelect");
            const weekSelect = document.getElementById("weekSelect");

            if (monthSelect && weekSelect) {
                populateSelect(monthSelect, monthOptions, selectedMonth);
                populateSelect(weekSelect, weekOptions, selectedWeek);
            } else {
                console.error("Dropdown elements not found.");
            }
        });
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
